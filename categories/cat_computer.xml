<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Simple Life (文章分類：computer)</title><link>https://github.com/mariolong/mariolong.github.io/</link><description></description><atom:link href="https://mariolong.github.io/categories/cat_computer.xml" rel="self" type="application/rss+xml"></atom:link><language>zh_tw</language><copyright>Contents © 2018 &lt;a href="mailto:mariolong5782@gmail.com"&gt;Mario Long&lt;/a&gt; </copyright><lastBuildDate>Mon, 21 May 2018 10:13:03 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>部落格，重回 nikola+org-mode</title><link>https://mariolong.github.io/posts/zhong-hui-nikola-xie-luo-ge/</link><dc:creator>Mario Long</dc:creator><description>&lt;p&gt;
掙扎了許久，還是先用&lt;a href="https://getnikola.com/"&gt;nikola&lt;/a&gt;記錄一些事，畢竟比較熟悉，能快一點上手。
&lt;/p&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; 安裝&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip nikola
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; 設定&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
執行&lt;code&gt;nikola init&lt;/code&gt;後，依指示設定，比較省事。
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nikola init &amp;lt;blog-name&amp;gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; &amp;lt;blog-name&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-1" class="outline-3"&gt;
&lt;h3 id="sec-2-1"&gt;&lt;span class="section-number-3"&gt;2.1&lt;/span&gt; configuration file&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-1"&gt;
&lt;p&gt;
修改&lt;code&gt;conf.py&lt;/code&gt;，慢慢改，內容很多，不必急於一時。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-2" class="outline-3"&gt;
&lt;h3 id="sec-2-2"&gt;&lt;span class="section-number-3"&gt;2.2&lt;/span&gt; theme&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-2"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nikola theme install bootstrap
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-2-1" class="outline-4"&gt;
&lt;h4 id="sec-2-2-1"&gt;&lt;span class="section-number-4"&gt;2.2.1&lt;/span&gt; &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; add local search&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-2-2-1"&gt;
&lt;p&gt;
&lt;a href="https://plugins.getnikola.com/v7/localsearch/"&gt;https://plugins.getnikola.com/v7/localsearch/&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-3" class="outline-3"&gt;
&lt;h3 id="sec-2-3"&gt;&lt;span class="section-number-3"&gt;2.3&lt;/span&gt; org-mod&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-3"&gt;
&lt;p&gt;
先安裝 plugin orgmode，再做一點點微調即可。
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nikola plugin -i orgmode
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
開啟&lt;code&gt;&amp;lt;blog-name&amp;gt;/plugins/orgmode/init.el&lt;/code&gt;，加上以下的程式碼。
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-3-1" class="outline-4"&gt;
&lt;h4 id="sec-2-3-1"&gt;&lt;span class="section-number-4"&gt;2.3.1&lt;/span&gt; 刪除不必要的空白&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-2-3-1"&gt;
&lt;p&gt;
換行時，在兩個字間會有一個空白，不好看。
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;;; https://github.com/emacs-china/emacs-china.github.io/blob/master/blog/FengShu/org-remove-useless-space-between-chinese.org&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;eh-org-clean-space&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;text&lt;/span&gt; &lt;span class="nv"&gt;backend&lt;/span&gt; &lt;span class="nv"&gt;info&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="s"&gt;"在 export 为 HTML 时，删除中文之间不必要的空格"&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;org-export-derived-backend-p&lt;/span&gt; &lt;span class="nv"&gt;backend&lt;/span&gt; &lt;span class="ss"&gt;'html&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;regexp&lt;/span&gt; &lt;span class="s"&gt;"[[:multibyte:]]"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;string &lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="c1"&gt;;; org 默认将一个换行符转换为空格，但中文不需要这个空格，删除。&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;string&lt;/span&gt;
	    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;replace-regexp-in-string&lt;/span&gt;
	     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt; &lt;span class="s"&gt;"\\(%s\\) *\n *\\(%s\\)"&lt;/span&gt; &lt;span class="nv"&gt;regexp&lt;/span&gt; &lt;span class="nv"&gt;regexp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	     &lt;span class="s"&gt;"\\1\\2"&lt;/span&gt; &lt;span class="nv"&gt;string&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="c1"&gt;;; 删除粗体之前的空格&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;string&lt;/span&gt;
	    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;replace-regexp-in-string&lt;/span&gt;
	     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt; &lt;span class="s"&gt;"\\(%s\\) +\\(&amp;lt;\\)"&lt;/span&gt; &lt;span class="nv"&gt;regexp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	     &lt;span class="s"&gt;"\\1\\2"&lt;/span&gt; &lt;span class="nv"&gt;string&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="c1"&gt;;; 删除粗体之后的空格&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;string&lt;/span&gt;
	    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;replace-regexp-in-string&lt;/span&gt;
	     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt; &lt;span class="s"&gt;"\\(&amp;gt;\\) +\\(%s\\)"&lt;/span&gt; &lt;span class="nv"&gt;regexp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	     &lt;span class="s"&gt;"\\1\\2"&lt;/span&gt; &lt;span class="nv"&gt;string&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="nv"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;'org-export-filter-paragraph-functions&lt;/span&gt;
	     &lt;span class="ss"&gt;'eh-org-clean-space&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-3-2" class="outline-4"&gt;
&lt;h4 id="sec-2-3-2"&gt;&lt;span class="section-number-4"&gt;2.3.2&lt;/span&gt; Convert inline verbatim to kbd when HTML export&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-2-3-2"&gt;
&lt;p&gt;
ref: &lt;a href="https://emacs-china.org/t/org-mode/1165"&gt;https://emacs-china.org/t/org-mode/1165&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
change &lt;kbd&gt;verbatim&lt;/kbd&gt; to &lt;kbd&gt;kbd&lt;/kbd&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;code&lt;/code&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;org-html-text-markup-alist&lt;/span&gt;
      &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;bold&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;b&amp;gt;%s&amp;lt;/b&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;code&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;code&amp;gt;%s&amp;lt;/code&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;italic&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;i&amp;gt;%s&amp;lt;/i&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;strike-through&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;del&amp;gt;%s&amp;lt;/del&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;underline&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;span class=\"underline\"&amp;gt;%s&amp;lt;/span&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;verbatim&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;kbd&amp;gt;%s&amp;lt;/kbd&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-4" class="outline-3"&gt;
&lt;h3 id="sec-2-4"&gt;&lt;span class="section-number-3"&gt;2.4&lt;/span&gt; nikola github_deploy&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-4"&gt;
&lt;p&gt;
REF: &lt;a href="https://getnikola.com/handbook.html#deploying-to-github"&gt;https://getnikola.com/handbook.html#deploying-to-github&lt;/a&gt;
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Initialize a Nikola site, if you haven’t already.
&lt;/li&gt;

&lt;li&gt;Initialize a git repository in your Nikola source directory by running:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git init .
git remote add origin git@github.com:user/repository.git
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Setup branches and remotes in &lt;code&gt;conf.py&lt;/code&gt;:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;GITHUB_DEPLOY_BRANCH is the branch where Nikola-generated HTML files will be deployed. It should be gh-pages for project pages and master for user pages (user.github.io).
&lt;/li&gt;
&lt;li&gt;GITHUB_SOURCE_BRANCH is the branch where your Nikola site source will be deployed. We recommend and default to src.
&lt;/li&gt;
&lt;li&gt;GITHUB_REMOTE_NAME is the remote to which changes are pushed.
&lt;/li&gt;
&lt;li&gt;GITHUB_COMMIT_SOURCE controls whether or not the source branch is automatically committed to and pushed. We recommend setting it to True, unless you are automating builds with Travis CI.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Create a &lt;code&gt;.gitignore&lt;/code&gt; file. We recommend adding at least the following entries:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cache
.doit.db
__pycache__
output
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
If you set GITHUB_COMMIT_SOURCE to False, you must switch to your source branch and commit to it. Otherwise, this is done for you.
&lt;/p&gt;

&lt;p&gt;
Run &lt;code&gt;nikola github_deploy&lt;/code&gt;. This will &lt;b&gt;build&lt;/b&gt; the site, &lt;b&gt;commit&lt;/b&gt; the
output folder to your deploy branch, and &lt;b&gt;push&lt;/b&gt; to GitHub. Your website
should be up and running within a few minutes.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-4-1" class="outline-4"&gt;
&lt;h4 id="sec-2-4-1"&gt;&lt;span class="section-number-4"&gt;2.4.1&lt;/span&gt; install ghp_import2&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-2-4-1"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo pip install ghp_import2
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-4-2" class="outline-4"&gt;
&lt;h4 id="sec-2-4-2"&gt;&lt;span class="section-number-4"&gt;2.4.2&lt;/span&gt; ssh&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-2-4-2"&gt;
&lt;/div&gt;&lt;ol class="org-ol"&gt;&lt;li&gt;&lt;a id="sec-2-4-2-1" name="sec-2-4-2-1"&gt;&lt;/a&gt;install openssh&lt;br&gt;&lt;div class="outline-text-5" id="text-2-4-2-1"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yaourt -S openssh
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="sec-2-4-2-2" name="sec-2-4-2-2"&gt;&lt;/a&gt;follow github help page to add ssh connect to github&lt;br&gt;&lt;div class="outline-text-5" id="text-2-4-2-2"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/"&gt;Generating a new SSH key and adding it to the ssh-agent - User Documentation&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://help.github.com/articles/working-with-ssh-key-passphrases/"&gt;Working with SSH key passphrases - User Documentation&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/"&gt;Adding a new SSH key to your GitHub account - User Documentation&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh-keygen -p
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="sec-2-4-2-3" name="sec-2-4-2-3"&gt;&lt;/a&gt;fix &lt;code&gt;.git/config&lt;/code&gt;&lt;br&gt;&lt;div class="outline-text-5" id="text-2-4-2-3"&gt;
&lt;p&gt;
&lt;a href="https://stackoverflow.com/questions/13509293/git-fatal-could-not-read-from-remote-repository"&gt;https://stackoverflow.com/questions/13509293/git-fatal-could-not-read-from-remote-repository&lt;/a&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
I was facing same issue a while ago…
my .git/config had
&lt;/p&gt;

&lt;p&gt;
url = git@github.com:manishnakar/polymer-demo.git
&lt;/p&gt;

&lt;p&gt;
I replaced it with
&lt;/p&gt;

&lt;p&gt;
url = &lt;a href="https://github.com/manishnakar/polymer-demo.git"&gt;https://github.com/manishnakar/polymer-demo.git&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
and it works now:)
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="sec-2-4-2-4" name="sec-2-4-2-4"&gt;&lt;/a&gt;&lt;span class="todo TODO"&gt;TODO&lt;/span&gt; i don't want to input password twice&lt;br&gt;&lt;/li&gt;&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; 開始使用&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
建立新的文章，
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nikola new-post -e -f orgmod
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
寫完就 build
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nikola build
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
或發佈吧！
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nikola github_deploy
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
一切都就緒了，那就開始專心寫文章吧！
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>Linux</category><category>nikola</category><guid>https://mariolong.github.io/posts/zhong-hui-nikola-xie-luo-ge/</guid><pubDate>Mon, 14 May 2018 01:32:19 GMT</pubDate></item><item><title>Install Haskell Applications</title><link>https://mariolong.github.io/posts/install-haskell-applications/</link><dc:creator>Mario Long</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; 前言&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
在 archlinux 上想用 haskell 真不是一件容易的事，因為選擇太多。
&lt;/p&gt;

&lt;p&gt;
不管如何，終於把 haskell 的開發環境設好，也順利完成了第一支小程式，可以抓網頁上目前最新的電影表列，並以 gmail 通知。
&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mariolong.github.io/posts/install-haskell-applications/"&gt;閱讀更多…&lt;/a&gt; (尚餘 1 分鐘)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</description><category>haskell</category><category>pandoc</category><category>xmonad</category><guid>https://mariolong.github.io/posts/install-haskell-applications/</guid><pubDate>Sat, 28 Apr 2018 11:16:44 GMT</pubDate></item><item><title>alsa equaler</title><link>https://mariolong.github.io/posts/alsa-equaler/</link><dc:creator>Mario Long</dc:creator><description>&lt;p&gt;
音響要好聲，空間才是王道&lt;sup&gt;&lt;a id="fnr.1" name="fnr.1" class="footref" href="https://mariolong.github.io/posts/alsa-equaler/#fn.1"&gt;1&lt;/a&gt;&lt;/sup&gt;，没有 DRC 前，先試試等化器&lt;sup&gt;&lt;a id="fnr.2" name="fnr.2" class="footref" href="https://mariolong.github.io/posts/alsa-equaler/#fn.2"&gt;2&lt;/a&gt;&lt;/sup&gt;，也許調一調就可用啦。在 archlinuxl 中，我用的是 alsa 的架構播放音樂，
Archlinux WIKI 的&lt;a href="https://wiki.archlinux.org/index.php/Advanced_Linux_Sound_Architecture"&gt;Advanced Linux Sound Architecture&lt;/a&gt;已說明等化器的安裝及設定，照做即可。
&lt;/p&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; install&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yaourt -S alsaequal
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; config&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
在&lt;kbd&gt;/etc/asound.conf&lt;/kbd&gt;加上以下設定：
&lt;/p&gt;

&lt;pre class="example"&gt;
ctl.equal {
    type equal;
}

pcm.plugequal {
    type equal;
    # Modify the line below if you do not
    # want to use sound card 0.
    #slave.pcm "plughw:0,0";
    # by default we want to play from more sources at time:
    slave.pcm "plug:dmix";
}

# pcm.equal {
# If you do not want the equalizer to be your
# default soundcard comment the following
# line and uncomment the above line. (You can
# choose it as the output device by addressing
# it with specific apps,eg mpg123 -a equal 06.Back_In_Black.mp3)
pcm.!default {
    type plug;
    slave.pcm plugequal;
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; reboot&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
讓 alsa 可用等化器
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; 調整等化器&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
執行
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;alsamixer -D equal
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
PS. 用 Q,W,E,Z,X,C 可分別調整左右聲道的音量。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-5" class="outline-2"&gt;
&lt;h2 id="sec-5"&gt;&lt;span class="section-number-2"&gt;5&lt;/span&gt; mpd issue&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-5"&gt;
&lt;p&gt;
總是會連不上 mpd server，後來在 WIKI 中讀到一段話：
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
Note that configuration file is different for each user (until not
specified else) it is saved in ~/.alsaequal.bin. so if you want to use
ALSAEqual with mpd or another software running under different user,
you can configure it using
&lt;/p&gt;

&lt;p&gt;
$ su mpd -c 'alsamixer -D equal'
&lt;/p&gt;

&lt;p&gt;
or for example, you can make a symlink to your .alsaequal.bin in his
home…
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
我在&lt;kbd&gt;/root&lt;/kbd&gt;目錄下，建一個連到主目錄&lt;kbd&gt;.alsaequal.bin&lt;/kbd&gt;的連結，
mpd 即可使用，瞎打誤撞。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="footnotes"&gt;
&lt;h2 class="footnotes"&gt;Footnotes: &lt;/h2&gt;
&lt;div id="text-footnotes"&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.1" name="fn.1" class="footnum" href="https://mariolong.github.io/posts/alsa-equaler/#fnr.1"&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;p class="footpara"&gt;
&lt;a href="http://www.miaofoundry.url.tw/products-and-services/DRC/"&gt;音樂再生首要難題 – 空間&lt;/a&gt;
&lt;/p&gt;&lt;/div&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.2" name="fn.2" class="footnum" href="https://mariolong.github.io/posts/alsa-equaler/#fnr.2"&gt;2&lt;/a&gt;&lt;/sup&gt; &lt;p class="footpara"&gt;
&lt;a href="http://www.miaofoundry.url.tw/products-and-services/DRC/whats/DRC-vs-others/"&gt;等化器(EQ)&lt;/a&gt;
&lt;/p&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;</description><category>alsa</category><category>Linux</category><category>mpd</category><category>music</category><guid>https://mariolong.github.io/posts/alsa-equaler/</guid><pubDate>Mon, 15 Jan 2018 14:20:29 GMT</pubDate></item><item><title>replace hd on LVM</title><link>https://mariolong.github.io/posts/replace-hd-on-lvm/</link><dc:creator>Mario Long</dc:creator><description>&lt;div&gt;&lt;p&gt;lvm 上的一顆硬碟壞了，要換掉。&lt;/p&gt;
&lt;p&gt;整個過程並不像網上查到的那麼順利，所以，還是記錄下來，以備不時之需。&lt;/p&gt;
&lt;p&gt;參考 &lt;a class="reference external" href="http://www.microhowto.info/howto/replace_one_of_the_physical_volumes_in_an_lvm_volume_group.html"&gt;Replace one of the physical volumes in an LVM volume group&lt;/a&gt;
，鳥哥的 LINUX 私房菜，
和 &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/LVM"&gt;Archlinux Wiki&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;為了行文方便，先做以下說明：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
/dev/sdd 是壞掉的硬碟
/dev/sdb 是新的硬碟
&lt;/pre&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;步驟&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;準備好要加入 LVM 的硬碟，並用 gparted 設定為 lvm pv。
有人是用 &lt;tt class="docutils literal"&gt;pvcreate&lt;/tt&gt; ，反正功能是一樣的，就不必想太多，能完成工作就好。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;將新硬碟加入 VG:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo vgextend VG01 /dev/sdb1
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;資料移到新硬碟:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo pvmove /dev/sdd1 /dev/sdb1
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;檢查是否移動完成&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo pvs

PV         VG   Fmt  Attr PSize   PFree
/dev/sdb1  VG01 lvm2 a--    1.36t      0
/dev/sdd1  VG01 lvm2 a--  931.51g 931.51g

$ sudo pvdisplay

--- Physical volume ---
PV Name               /dev/sdd1
VG Name               VG01
PV Size               931.51 GiB / not usable 4.00 MiB
Allocatable           yes
PE Size               4.00 MiB
Total PE              238466
Free PE               238466
Allocated PE          0
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;縮小 lv&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo resize2fs -M /dev/VG01/LV00
$ sudo lvresize -l -238466 /dev/VG01/LV00
$ sudo resize2fs /dev/VG01/LV00
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;移除舊硬碟&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo vgreduce VG01 /dev/sdd1
Removed "/dev/sdd1" from volume group "VG01"

$ sudo pvremove /dev/sdd1
Labels on physical volume "/dev/sdd1" successfully wiped
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="issue"&gt;
&lt;h2&gt;ISSUE&lt;/h2&gt;
&lt;div class="section" id="lv"&gt;
&lt;h3&gt;縮小 lv&lt;/h3&gt;
&lt;p&gt;要縮小 lv 時，先要將 file system 縮小，否則開機時，會報錯。&lt;/p&gt;
&lt;p&gt;我的作法是將 file system 降至最低，就不必去計算要留多少。&lt;/p&gt;
&lt;p&gt;然後，縮小 lv。&lt;/p&gt;
&lt;p&gt;最後，再把 file system 放到最大即可。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo resize2fs -M /dev/VG01/LV00
$ sudo lvresize -l -238466 /dev/VG01/LV00
$ sudo resize2fs /dev/VG01/LV00
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="pvmove"&gt;
&lt;h3&gt;pvmove&lt;/h3&gt;
&lt;p&gt;pvmove 時，不知為何沒將所有的 PE 都移動到新的硬碟，結果重做一次後就好了。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo pvdisplay
$ sudo lvresize -l -238466 /dev/VG01/LV00
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;後記&lt;/h2&gt;
&lt;p&gt;這次的工作一直卡在縮小 lv 的地方，因為沒有先縮小 file system，造成 fsck 會報錯，然後就無法開機。&lt;/p&gt;
&lt;p&gt;雖然在試誤的過程中，一直擔心硬碟中的資料會毀損，最後的結果是好的，沒有任何資料毀損。&lt;/p&gt;
&lt;p&gt;真是慶幸。&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>Linux</category><guid>https://mariolong.github.io/posts/replace-hd-on-lvm/</guid><pubDate>Thu, 11 Jun 2015 23:52:30 GMT</pubDate></item><item><title>在 Archlinux 安裝 nginx</title><link>https://mariolong.github.io/posts/an-zhuang-nginx/</link><dc:creator>Mario Long</dc:creator><description>&lt;div&gt;&lt;p&gt;用 nikola 寫了些 blog，裝上 nginx 只是為了能在 localhost 看看這些文章。
很大材小用吧。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;安裝&lt;/h2&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_e754333b4c0e47998ac5c902786e2d43-1"&gt;&lt;/a&gt;yaourt -S nginx
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;配置&lt;/h2&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_2b36c50bf23941c49d5206110e9c7303-1"&gt;&lt;/a&gt;sudo nano /etc/nginx/nginx.conf
&lt;/pre&gt;&lt;p&gt;預設的 nginx.conf 的結構很單純。&lt;tt class="docutils literal"&gt;$ grep &lt;span class="pre"&gt;-v&lt;/span&gt; '#' /etc/nginx/nginx.conf&lt;/tt&gt;&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_6ea3157bd9a84a26b21af59cc1eb0d89-1"&gt;&lt;/a&gt;worker_processes  1;
&lt;a name="rest_code_6ea3157bd9a84a26b21af59cc1eb0d89-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_6ea3157bd9a84a26b21af59cc1eb0d89-3"&gt;&lt;/a&gt;events {
&lt;a name="rest_code_6ea3157bd9a84a26b21af59cc1eb0d89-4"&gt;&lt;/a&gt;    worker_connections  1024;
&lt;a name="rest_code_6ea3157bd9a84a26b21af59cc1eb0d89-5"&gt;&lt;/a&gt;}
&lt;a name="rest_code_6ea3157bd9a84a26b21af59cc1eb0d89-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_6ea3157bd9a84a26b21af59cc1eb0d89-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_6ea3157bd9a84a26b21af59cc1eb0d89-8"&gt;&lt;/a&gt;http {
&lt;a name="rest_code_6ea3157bd9a84a26b21af59cc1eb0d89-9"&gt;&lt;/a&gt;    include       mime.types;
&lt;a name="rest_code_6ea3157bd9a84a26b21af59cc1eb0d89-10"&gt;&lt;/a&gt;    default_type  application/octet-stream;
&lt;a name="rest_code_6ea3157bd9a84a26b21af59cc1eb0d89-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_6ea3157bd9a84a26b21af59cc1eb0d89-12"&gt;&lt;/a&gt;    sendfile        on;
&lt;a name="rest_code_6ea3157bd9a84a26b21af59cc1eb0d89-13"&gt;&lt;/a&gt;
&lt;a name="rest_code_6ea3157bd9a84a26b21af59cc1eb0d89-14"&gt;&lt;/a&gt;    keepalive_timeout  65;
&lt;a name="rest_code_6ea3157bd9a84a26b21af59cc1eb0d89-15"&gt;&lt;/a&gt;
&lt;a name="rest_code_6ea3157bd9a84a26b21af59cc1eb0d89-16"&gt;&lt;/a&gt;    server {
&lt;a name="rest_code_6ea3157bd9a84a26b21af59cc1eb0d89-17"&gt;&lt;/a&gt;        listen       80;
&lt;a name="rest_code_6ea3157bd9a84a26b21af59cc1eb0d89-18"&gt;&lt;/a&gt;        server_name  localhost;
&lt;a name="rest_code_6ea3157bd9a84a26b21af59cc1eb0d89-19"&gt;&lt;/a&gt;
&lt;a name="rest_code_6ea3157bd9a84a26b21af59cc1eb0d89-20"&gt;&lt;/a&gt;        location / {
&lt;a name="rest_code_6ea3157bd9a84a26b21af59cc1eb0d89-21"&gt;&lt;/a&gt;            root   /usr/share/nginx/html;
&lt;a name="rest_code_6ea3157bd9a84a26b21af59cc1eb0d89-22"&gt;&lt;/a&gt;            index  index.html index.htm;
&lt;a name="rest_code_6ea3157bd9a84a26b21af59cc1eb0d89-23"&gt;&lt;/a&gt;        }
&lt;a name="rest_code_6ea3157bd9a84a26b21af59cc1eb0d89-24"&gt;&lt;/a&gt;
&lt;a name="rest_code_6ea3157bd9a84a26b21af59cc1eb0d89-25"&gt;&lt;/a&gt;        error_page   500 502 503 504  /50x.html;
&lt;a name="rest_code_6ea3157bd9a84a26b21af59cc1eb0d89-26"&gt;&lt;/a&gt;        location = /50x.html {
&lt;a name="rest_code_6ea3157bd9a84a26b21af59cc1eb0d89-27"&gt;&lt;/a&gt;            root   /usr/share/nginx/html;
&lt;a name="rest_code_6ea3157bd9a84a26b21af59cc1eb0d89-28"&gt;&lt;/a&gt;        }
&lt;a name="rest_code_6ea3157bd9a84a26b21af59cc1eb0d89-29"&gt;&lt;/a&gt;    }
&lt;a name="rest_code_6ea3157bd9a84a26b21af59cc1eb0d89-30"&gt;&lt;/a&gt;}
&lt;/pre&gt;&lt;p&gt;以下是我的設定&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_687cc4012fb74c888b34ed32f0b739db-1"&gt;&lt;/a&gt;worker_processes  1;
&lt;a name="rest_code_687cc4012fb74c888b34ed32f0b739db-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_687cc4012fb74c888b34ed32f0b739db-3"&gt;&lt;/a&gt;events {
&lt;a name="rest_code_687cc4012fb74c888b34ed32f0b739db-4"&gt;&lt;/a&gt;    worker_connections  1024;
&lt;a name="rest_code_687cc4012fb74c888b34ed32f0b739db-5"&gt;&lt;/a&gt;}
&lt;a name="rest_code_687cc4012fb74c888b34ed32f0b739db-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_687cc4012fb74c888b34ed32f0b739db-7"&gt;&lt;/a&gt;http {
&lt;a name="rest_code_687cc4012fb74c888b34ed32f0b739db-8"&gt;&lt;/a&gt;    include       mime.types;
&lt;a name="rest_code_687cc4012fb74c888b34ed32f0b739db-9"&gt;&lt;/a&gt;    default_type  application/octet-stream;
&lt;a name="rest_code_687cc4012fb74c888b34ed32f0b739db-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_687cc4012fb74c888b34ed32f0b739db-11"&gt;&lt;/a&gt;    sendfile        on;
&lt;a name="rest_code_687cc4012fb74c888b34ed32f0b739db-12"&gt;&lt;/a&gt;    keepalive_timeout  65;
&lt;a name="rest_code_687cc4012fb74c888b34ed32f0b739db-13"&gt;&lt;/a&gt;
&lt;a name="rest_code_687cc4012fb74c888b34ed32f0b739db-14"&gt;&lt;/a&gt;    server {
&lt;a name="rest_code_687cc4012fb74c888b34ed32f0b739db-15"&gt;&lt;/a&gt;        listen       8000;
&lt;a name="rest_code_687cc4012fb74c888b34ed32f0b739db-16"&gt;&lt;/a&gt;        server_name  localhost;
&lt;a name="rest_code_687cc4012fb74c888b34ed32f0b739db-17"&gt;&lt;/a&gt;        location / {
&lt;a name="rest_code_687cc4012fb74c888b34ed32f0b739db-18"&gt;&lt;/a&gt;            root   /home/mariolong/Programing/wen-de-www/www/output;
&lt;a name="rest_code_687cc4012fb74c888b34ed32f0b739db-19"&gt;&lt;/a&gt;            index  index.html index.htm;
&lt;a name="rest_code_687cc4012fb74c888b34ed32f0b739db-20"&gt;&lt;/a&gt;        }
&lt;a name="rest_code_687cc4012fb74c888b34ed32f0b739db-21"&gt;&lt;/a&gt;        error_page   500 502 503 504  /50x.html;
&lt;a name="rest_code_687cc4012fb74c888b34ed32f0b739db-22"&gt;&lt;/a&gt;        location = /50x.html {
&lt;a name="rest_code_687cc4012fb74c888b34ed32f0b739db-23"&gt;&lt;/a&gt;            root   /usr/share/nginx/html;
&lt;a name="rest_code_687cc4012fb74c888b34ed32f0b739db-24"&gt;&lt;/a&gt;        }
&lt;a name="rest_code_687cc4012fb74c888b34ed32f0b739db-25"&gt;&lt;/a&gt;    }
&lt;a name="rest_code_687cc4012fb74c888b34ed32f0b739db-26"&gt;&lt;/a&gt;
&lt;a name="rest_code_687cc4012fb74c888b34ed32f0b739db-27"&gt;&lt;/a&gt;    server {
&lt;a name="rest_code_687cc4012fb74c888b34ed32f0b739db-28"&gt;&lt;/a&gt;        listen       8088;
&lt;a name="rest_code_687cc4012fb74c888b34ed32f0b739db-29"&gt;&lt;/a&gt;        server_name  localhost;
&lt;a name="rest_code_687cc4012fb74c888b34ed32f0b739db-30"&gt;&lt;/a&gt;
&lt;a name="rest_code_687cc4012fb74c888b34ed32f0b739db-31"&gt;&lt;/a&gt;        location / {
&lt;a name="rest_code_687cc4012fb74c888b34ed32f0b739db-32"&gt;&lt;/a&gt;            root /home/mariolong/Documents/myBlog/output;
&lt;a name="rest_code_687cc4012fb74c888b34ed32f0b739db-33"&gt;&lt;/a&gt;            index  index.html index.htm;
&lt;a name="rest_code_687cc4012fb74c888b34ed32f0b739db-34"&gt;&lt;/a&gt;        }
&lt;a name="rest_code_687cc4012fb74c888b34ed32f0b739db-35"&gt;&lt;/a&gt;    }
&lt;a name="rest_code_687cc4012fb74c888b34ed32f0b739db-36"&gt;&lt;/a&gt;}
&lt;/pre&gt;&lt;p&gt;如此配置好，文章寫好後，只要 &lt;tt class="docutils literal"&gt;nikola build&lt;/tt&gt; 即可，不必再 &lt;tt class="docutils literal"&gt;nikola serve&lt;/tt&gt;。&lt;/p&gt;
&lt;p&gt;回到 browser 中，直接訪問文章就好，方便多了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;啟動&lt;/h2&gt;
&lt;p&gt;以下分別為啟動、重啟、停止、開機啟動&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_8e0b2532621f40b0914d844301117dfb-1"&gt;&lt;/a&gt;sudo systemctl start nginx
&lt;a name="rest_code_8e0b2532621f40b0914d844301117dfb-2"&gt;&lt;/a&gt;sudo systemctl restart nginx
&lt;a name="rest_code_8e0b2532621f40b0914d844301117dfb-3"&gt;&lt;/a&gt;sudo systemctl stop nginx
&lt;a name="rest_code_8e0b2532621f40b0914d844301117dfb-4"&gt;&lt;/a&gt;sudo systemctl enable nginx
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;結論&lt;/h2&gt;
&lt;p&gt;在 archlinux 中用 nginx 真是容易。
當然，這個只是我玩玩而已，可不能當成生產環境。&lt;/p&gt;
&lt;p&gt;下一個要處理的是 bottle 和 nginx 合作的網頁程式。&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>nginx</category><category>nikola</category><guid>https://mariolong.github.io/posts/an-zhuang-nginx/</guid><pubDate>Fri, 07 Feb 2014 03:13:56 GMT</pubDate></item><item><title>DVD backup</title><link>https://mariolong.github.io/posts/dvd-backup/</link><dc:creator>Mario Long</dc:creator><description>&lt;div&gt;&lt;p&gt;手邊一堆 DVD，不保存到電腦裡，不安心啦。
為了保存這些 DVD，大約的流程如下：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;先將 DVD 轉成 ISO。&lt;/li&gt;
&lt;li&gt;把 ISO 裡的 VIDEO 目錄抓出來。&lt;/li&gt;
&lt;li&gt;VIDEO 中的 *.VOB 轉成 *.mkv 保存。&lt;/li&gt;
&lt;li&gt;有必要時，可以將 mkv 轉成自己想要的格式。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="dvd-to-iso"&gt;
&lt;h2&gt;DVD to ISO&lt;/h2&gt;
&lt;p&gt;爲了保存有價值的影片，儘量用比較高品質的壓縮方法。&lt;/p&gt;
&lt;p&gt;參考 &lt;a class="reference external" href="http://www.cmdln.org/2010/01/22/backing-up-disney-dvds/"&gt;BACKING UP DISNEY DVDS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;需要安裝的軟體：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ yaourt -S ddrescue dvdbackup libdvdcss
&lt;/pre&gt;
&lt;p&gt;使用流程：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ddrescue -n -b 2048 /dev/cdrom dvd.iso
dvdbackup -M -i dvd.iso -o dvd-dir
&lt;/pre&gt;
&lt;p&gt;如此就把整片 DVD 備份到 dvd-dir 中了。
接下來，再針對 dvd-dir 中的影片處理。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dvd-to-mkv"&gt;
&lt;h2&gt;DVD to MKV&lt;/h2&gt;
&lt;p&gt;參考 &lt;cite&gt;ffmpeg-xin-de&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;先將 ISO 轉成 MKV&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cat VTS_01_[1234].VOB | ffmpeg -probesize 214748000 -analyzeduration 214748000 -i - \
-map 0:0 -map 0:1 -map 0:2 \
-crf 18 -preset veryslow -tune help\
-filter:v yadif \
-c:a copy -c:s copy -y a.mkv
&lt;/pre&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-probesize&lt;/span&gt; 214748000 &lt;span class="pre"&gt;-analyzeduration&lt;/span&gt; 214748000&lt;/tt&gt; 有時會因爲音軌或字幕軌太晚出現，ffmpeg 會偵測不到，這時就加長偵測的時間和大小。&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-map&lt;/span&gt; 0:0 &lt;span class="pre"&gt;-map&lt;/span&gt; 0:1 &lt;span class="pre"&gt;-map&lt;/span&gt; 0:2&lt;/tt&gt; 是要封裝到 mkv 的軌道。&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-crf&lt;/span&gt; 18 &lt;span class="pre"&gt;-preset&lt;/span&gt; veryslow&lt;/tt&gt; 用這個參數大概就好了，眼睛看不出來與原始有何差異。有必要時可以再加上 -tune。&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-filter:v&lt;/span&gt; yadif&lt;/tt&gt; 就是 deinterlace。&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-c:a&lt;/span&gt; copy &lt;span class="pre"&gt;-c:s&lt;/span&gt; copy&lt;/tt&gt; 音軌和字幕軌都不重新編碼。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果沒有字幕，可以先取得字幕檔，再保存到 mkv 中，如下：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cat VTS_01_[1234].VOB | ffmpeg -i - -i a.ssa \
-map 0:0 -map 0:2 -map 1 \
-crf 18 -preset veryslow -tune zerolatency \
-filter:v yadif \
-c:a copy -c:s copy \
-y a.mkv
&lt;/pre&gt;
&lt;p&gt;重點是 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-i&lt;/span&gt; a.ssa &lt;span class="pre"&gt;-map&lt;/span&gt; 1 &lt;span class="pre"&gt;-c:s&lt;/span&gt; copy&lt;/tt&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="color-of-dvd-subtitle"&gt;
&lt;h2&gt;color of dvd subtitle&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikibooks.org/wiki/FFMPEG_An_Intermediate_Guide/subtitle_options"&gt;https://en.wikibooks.org/wiki/FFMPEG_An_Intermediate_Guide/subtitle_options&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;$ ffmpeg -palette "551A8B,551A8B,ffffff,000000,ffffff,ffffff,ffffff,ffffff,ffffff,ffffff,ffffff,ffffff,ffffff,ffffff,ffffff,ffffff" -i candy-001.mkv -c:a copy -filter_complex "[0:v][0:s]overlay" a.mkv&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;字框&lt;/li&gt;
&lt;li&gt;外框&lt;/li&gt;
&lt;li&gt;不知&lt;/li&gt;
&lt;li&gt;字本身&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>backup</category><category>dvd</category><guid>https://mariolong.github.io/posts/dvd-backup/</guid><pubDate>Fri, 25 Oct 2013 00:16:10 GMT</pubDate></item></channel></rss>