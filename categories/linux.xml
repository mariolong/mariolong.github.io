<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Simple Life (文章分類：linux)</title><link>https://github.com/mariolong/mariolong.github.io/</link><description></description><atom:link href="https://mariolong.github.io/categories/linux.xml" rel="self" type="application/rss+xml"></atom:link><language>zh_tw</language><copyright>Contents © 2018 &lt;a href="mailto:mariolong5782@gmail.com"&gt;Mario Long&lt;/a&gt; </copyright><lastBuildDate>Sun, 30 Sep 2018 08:22:23 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>將 windows 10 和 linux 移到新的 512G SSD</title><link>https://mariolong.github.io/posts/change-boot-ssd-to-512g/</link><dc:creator>Mario Long</dc:creator><description>&lt;p&gt;
新的 windows 10 真吃硬碟，原本 128G 的 SSD 不夠用，一直要努力刪掉暫時用不到的軟體，也真夠心煩的。萬一不小心刪錯了，也是件麻煩事。狠下心來，上原價屋買了顆 Intel 512G 的 SSD，花了新台幣 3388 元。
&lt;/p&gt;

&lt;p&gt;
昨天早上買的，今天早上到貨，下午裝上，晚上就進 linux，動手記錄這次的過程。呃，windows 10 明天再說吧，晚上，不想動太多系統。
&lt;/p&gt;

&lt;div id="outline-container-orgfcb77ab" class="outline-2"&gt;
&lt;h2 id="orgfcb77ab"&gt;系統移轉&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgfcb77ab"&gt;
&lt;p&gt;
先上網查到 &lt;a href="http://www.fox-saying.com/blog/post/43730227-%5B%E6%95%99%E5%AD%B8%5D-%E5%BF%AB%E9%80%9F%E6%AD%A3%E7%A2%BA%E8%BD%89%E7%A7%BB-ssd-%E4%B8%8A%E7%9A%84%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1-~-uefi"&gt;快速正確轉移 SSD 上的作業系統 ~ UEFI 介面 Windows10 OS 搬家&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
看起來，現在的工具真不少，也挺方便的。只要下載下面兩個程式：
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;EaseUS Todo Backup Free 免費版&lt;/li&gt;
&lt;li&gt;AOMEI Partition Assistant Standard Edition 免費版&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
EaseUS Todo Backup Free 可將 partition 完整複製，含開機區，只是 4K 對齊可能做不好，這時就需要 AOMEI Partition Assistant Standard 的幫忙。
&lt;/p&gt;

&lt;p&gt;
因為我的系統原本就是在 SSD 上，上次安裝是 4K 對齊的，因此這次做系統複製後，也自然就對齊好了。所以，就不必派出 AOMEI Partition Assistant Standard
上場救援。
&lt;/p&gt;

&lt;p&gt;
這步驟算是順利完成。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org5ec2849" class="outline-2"&gt;
&lt;h2 id="org5ec2849"&gt;BIOS 中調整開機碟順序&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org5ec2849"&gt;
&lt;p&gt;
選擇要開機的磁碟，不該有問題。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd847cf3" class="outline-2"&gt;
&lt;h2 id="orgd847cf3"&gt;開機設定 grub&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd847cf3"&gt;
&lt;p&gt;
原以為開機會有一番折騰，沒想到一開機就成功進入 Linux。用 &lt;code&gt;lsblk -o
+uuid&lt;/code&gt; 指令找新 SSD 的 uuid，進 &lt;code&gt;/etc/fstab&lt;/code&gt; 查看掛載磁碟的 uuid, 竟然和先前的相同，不知是幸運，還是 Linux 本來就是如此。windows 就沒有這麼幸運，uuid 不同。
&lt;/p&gt;

&lt;p&gt;
接下來改&lt;code&gt;/etc/grub.d/40_custom&lt;/code&gt; ，讓 grup menu 中 windows 10 的項目指到正確的磁碟。
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;menuentry "Windows 10" --class windows --class os {
insmod ntfs
search --no-floppy --set=root --fs-uuid $new-ssd-uuid$
ntldr /bootmgr
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
重建 grub menu
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo grub-mkconfig -o /boot/grub/grub.cfg
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
最後以 windows 10 重新開機，嗯，windows 偵測到 boot 區有問題，要求修復。不是很順利。
&lt;/p&gt;

&lt;p&gt;
接著，我做了許多嘗試，&lt;a href="https://mariolong.github.io/posts/change-boot-ssd-to-512g/#orgf9fa3bd"&gt;記錄於後&lt;/a&gt;，如：以正版 windows 10 開機，修復 MBR，失敗，不能開機；重灌 windows 10，裝上 EasyBCD，試圖由 linux 開機後再修
grub，可惜 EasyBCD 不支援 ext4。
&lt;/p&gt;

&lt;p&gt;
最後，做了 Archlinux 開機片，進 linux，修復好 boot 和 grub.cfg，才得以正常地開機進入 windows 10 和 linux。記錄在&lt;a href="https://mariolong.github.io/posts/change-boot-ssd-to-512g/#org0d8e8ed"&gt;正解&lt;/a&gt;中。
&lt;/p&gt;

&lt;p&gt;
當作是一次經驗，下次不會再出錯。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org87b82a6" class="outline-2"&gt;
&lt;h2 id="org87b82a6"&gt;&lt;a id="org0d8e8ed"&gt;&lt;/a&gt;正解&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org87b82a6"&gt;
&lt;p&gt;
進到了 linux 後，先裝上 &lt;code&gt;os-prober&lt;/code&gt;，讓 &lt;code&gt;grub-mkconfig&lt;/code&gt; 可以自動找出
widnows 10 並設定好 boot 指令。
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yaourt -S os-prober
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
接著執行 &lt;code&gt;grub-mkconfig&lt;/code&gt; 重建 &lt;code&gt;grub.cfg&lt;/code&gt;，重開機就會 OK。
&lt;/p&gt;

&lt;p&gt;
原因在於&lt;code&gt;/etc/grub.d/40_custom&lt;/code&gt;中，最後一行的 &lt;code&gt;ntldr /bootmgr&lt;/code&gt;。
windows 10 1803 版的 &lt;code&gt;/bootmgr&lt;/code&gt; 找不到了，所以沿用先前舊的 &lt;code&gt;grub.cfg&lt;/code&gt;
是錯的。不過，只要先裝上 &lt;code&gt;os-prober&lt;/code&gt;，就可解決這個錯誤。
&lt;/p&gt;

&lt;p&gt;
linux 中，已經把&lt;code&gt;/etc/grub.d/40_custom&lt;/code&gt;拿掉了。
&lt;/p&gt;

&lt;p&gt;
最後一定可以解決問題，我還是很不喜歡 windows，改個版本也能搞到不能用，也不會顯示個正確的訊息，害我們浪費了許多時間。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6053228" class="outline-2"&gt;
&lt;h2 id="org6053228"&gt;&lt;a id="orgf9fa3bd"&gt;&lt;/a&gt;其他過程及記錄&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org6053228"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgd9ce6e2" class="outline-3"&gt;
&lt;h3 id="orgd9ce6e2"&gt;fix windows boot&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgd9ce6e2"&gt;
&lt;p&gt;
拿出原版的 windows 10 安裝 USB 隨身碟，開機修復…，竟然無法進入安裝畫面，還一直要我放入安裝光碟。這是什麼情形？我可是用正版的 windows 10 啊！真是愈來愈討厭 microsoft 了。討厭歸討厭，問題還是得解決啊。
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7095a8d" class="outline-4"&gt;
&lt;h4 id="org7095a8d"&gt;先開機進入 linux，在 linux 中，&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org7095a8d"&gt;
&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="org3500b55"&gt;&lt;/a&gt;download windows 10 ISO&lt;br&gt;
&lt;div class="outline-text-5" id="text-org3500b55"&gt;
&lt;p&gt;
從 &lt;code&gt;https://www.microsoft.com/zh-tw/software-download/windows10ISO&lt;/code&gt; 下載 windows 10 ISO。
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="org5e380e0"&gt;&lt;/a&gt;燒錄開機 DVD&lt;br&gt;
&lt;div class="outline-text-5" id="text-org5e380e0"&gt;
&lt;p&gt;
目前手邊沒有容量夠大的 USB 隨身碟，可是有 DVD-RW，反正也用不著 DVD，干脆拿來燒成 windows 10 的開機片。
&lt;/p&gt;

&lt;p&gt;
先安裝燒錄軟體 k3b：
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yaourt -S k3b dvd+rw-tools cdrdao
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
執行 k3b，選擇「燒錄映像檔」，檢查，4 倍速慢慢燒，比較不會出錯。燒了 30 分鐘，終於完成。
&lt;/p&gt;

&lt;p&gt;
重開機，結果可以進入安裝畫面，那就進行修複吧。修復完了，重開機，可以進入 windows 中，開心啊。趕緊安裝 EasyBCD，要能進 linux。
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id="outline-container-org1303d12" class="outline-4"&gt;
&lt;h4 id="org1303d12"&gt;在 windows 10 中，&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org1303d12"&gt;
&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="orgca46aca"&gt;&lt;/a&gt;安裝 EasyBCD&lt;br&gt;
&lt;div class="outline-text-5" id="text-orgca46aca"&gt;
&lt;p&gt;
可是 EasyBCD 不支援 ext4，所以裝了也不能進我的 linux 系統。晴天霹靂。因為要修復 grub.cfg，必須要在 Linux 中，看來只能乖乖做 linux 開機片。
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="org6654265"&gt;&lt;/a&gt;用 USB 隨身碟做 Archlinux 安裝片&lt;br&gt;
&lt;div class="outline-text-5" id="text-org6654265"&gt;
&lt;p&gt;
下載 &lt;a href="http://rufus.akeo.ie/"&gt;rufus&lt;/a&gt; 和 &lt;a href="https://www.archlinux.org/download/"&gt;archiso&lt;/a&gt;，製作好 Archlinux 安裝片，重開機進入 linux，接著修複 boot 區和 grub.cfg。最後，終於了解到&lt;a href="https://mariolong.github.io/posts/change-boot-ssd-to-512g/#org0d8e8ed"&gt;正解如上&lt;/a&gt;。
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>linux</category><category>ssd</category><category>windows</category><guid>https://mariolong.github.io/posts/change-boot-ssd-to-512g/</guid><pubDate>Thu, 27 Sep 2018 12:55:57 GMT</pubDate></item><item><title>Install stack, cabal and nix for writing miso project</title><link>https://mariolong.github.io/posts/install-stack-cabal-nix-for-miso/</link><dc:creator>Mario Long</dc:creator><description>&lt;p&gt;
在 &lt;a href="https://mariolong.github.io/posts/install-haskell-applications/"&gt;Install Haskell Applications&lt;/a&gt; 中，提到了 haskell 三個 package 管理程式：cabal, stack, nix.
我會用到的 haskell 軟體有 xmonad/taffybar, pandoc 和自行撰寫的程式。xmonad/taffybar 用 stack 安裝比較方便，pandoc
在 cabal 中的版本會比較新，miso/GHCJS 的程式，用 nix 管理是最合適且最強大。
&lt;/p&gt;

&lt;div id="outline-container-org26b9a5e" class="outline-2"&gt;
&lt;h2 id="org26b9a5e"&gt;install nix&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org26b9a5e"&gt;
&lt;p&gt;
因為 miso 建議用 nix 管理 project，還是參考 &lt;a href="https://nixos.org/nix/manual/"&gt;Nix manual&lt;/a&gt; 試著把它裝起來。
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl https://nixos.org/nix/install &lt;span class="p"&gt;|&lt;/span&gt; sh
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
安裝成功後，會有以下的訊息：
&lt;/p&gt;
&lt;pre class="example"&gt;
Installation finished!  To ensure that the necessary environment
variables are set, either log in again, or type

  . /home/mario/.nix-profile/etc/profile.d/nix.sh
&lt;/pre&gt;

&lt;p&gt;
在 &lt;code&gt;.profile&lt;/code&gt; 中，加上
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[[&lt;/span&gt; -f &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.nix-profile/etc/profile.d/nix.sh &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; . &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.nix-profile/etc/profile.d/nix.sh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
以後開機就可以使用 nix 的指令了。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6c518e7" class="outline-2"&gt;
&lt;h2 id="org6c518e7"&gt;install stack, cabal, xmonad/taffybar, pandoc&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org6c518e7"&gt;
&lt;p&gt;
還是可以用 &lt;a href="https://mariolong.github.io/posts/install-haskell-applications/"&gt;Install Haskell Applications&lt;/a&gt; 的方法，而 cabal 可不安裝，用 stack 即可。BUT…
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge8f3b1c" class="outline-2"&gt;
&lt;h2 id="orge8f3b1c"&gt;install GHCJS&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge8f3b1c"&gt;
&lt;p&gt;
因為要先安裝 GHCJS 後，才能用 miso 寫程式。所以這步驟是必要的。
&lt;/p&gt;

&lt;p&gt;
在 &lt;a href="https://mariolong.github.io/posts/install-ghcjs-archlinux/"&gt;Install ghcjs for ghc 8.4.3 on archlinux&lt;/a&gt;, 我會記錄了以 stack 安裝
GHCJS，在過程中一定會安裝全域 cabal, 這會是個麻煩事。因為用 stack 管理
miso 專案，則不能用全域 cabal，必須把全域 cabal 刪除。真困擾。
&lt;/p&gt;

&lt;p&gt;
雖然可以用 nix 管理專案，只是功能強，意味著學習曲線比較陡吧。算了，還是乖乖學 nix。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc3a1b93" class="outline-2"&gt;
&lt;h2 id="orgc3a1b93"&gt;conclusion&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc3a1b93"&gt;
&lt;p&gt;
Haskell 真的難搞，不僅語言本身難搞，連開發環境都難搞。&lt;del&gt;也許先用 servant
做 server 才是對的&lt;/del&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cabal</category><category>haskell</category><category>linux</category><category>miso</category><category>nix</category><category>stack</category><guid>https://mariolong.github.io/posts/install-stack-cabal-nix-for-miso/</guid><pubDate>Fri, 14 Sep 2018 04:07:35 GMT</pubDate></item><item><title>install and use dropbox on archlinux</title><link>https://mariolong.github.io/posts/dropbox/</link><dc:creator>Mario Long</dc:creator><description>&lt;div id="outline-container-orga1695a8" class="outline-2"&gt;
&lt;h2 id="orga1695a8"&gt;install&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orga1695a8"&gt;
&lt;p&gt;
因 archlinuxfr 中也有 dropbox，為了不和它衝突，特別加上 &lt;code&gt;aur/dropbox&lt;/code&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yaourt -S aur/dropbox
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb76f715" class="outline-2"&gt;
&lt;h2 id="orgb76f715"&gt;config dropbox.service&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgb76f715"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org7eef31b" class="outline-3"&gt;
&lt;h3 id="org7eef31b"&gt;setup environment variables&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org7eef31b"&gt;
&lt;p&gt;
為了正確顯示，要加上以下命令：
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Environment=DISPLAY=:0
Environment=LC_ALL=zh_TW.UTF-8 LANG=zh_TW.UTF-8 QT_STYLE_OVERRIDE=GTK+
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org26868dd" class="outline-3"&gt;
&lt;h3 id="org26868dd"&gt;set Restart=no in dropbox.service&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org26868dd"&gt;
&lt;p&gt;
根據 &lt;a href="https://gitlab.com/yan12125/aur/issues/21"&gt;Dropbox kill/restart loop when started at boot via systemd&lt;/a&gt;，在
dropbox.service 中，特別加上
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Restart=no
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org78fbcaa" class="outline-3"&gt;
&lt;h3 id="org78fbcaa"&gt;final dropbox.service&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org78fbcaa"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[Unit]
Description=Dropbox for systemd/user

[Service]
Environment=DISPLAY=:0
Environment=LC_ALL=zh_TW.UTF-8 LANG=zh_TW.UTF-8 QT_STYLE_OVERRIDE=GTK+
Type=simple
ExecStart=/usr/bin/dropbox
ExecReload=/bin/kill -HUP $MAINPID
KillMode=process
Restart=no

[Install]
WantedBy=default.target
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf4f182c" class="outline-2"&gt;
&lt;h2 id="orgf4f182c"&gt;start dropbox&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf4f182c"&gt;
&lt;p&gt;
最後執行
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;systemctl start dropbox --user
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
or/and
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; dropbox --user
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
即可。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>dropbox</category><category>linux</category><guid>https://mariolong.github.io/posts/dropbox/</guid><pubDate>Fri, 07 Sep 2018 04:18:23 GMT</pubDate></item><item><title>Fish 用法記錄</title><link>https://mariolong.github.io/posts/fish-usage/</link><dc:creator>Mario Long</dc:creator><description>&lt;p&gt;
參考 &lt;a href="https://codeyarns.com/2015/05/29/directory-history-in-the-fish-shell/"&gt;Directory history in the Fish shell&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
按 &lt;kbd&gt;Alt-Left/Right&lt;/kbd&gt; 直接到上／下目錄
&lt;/p&gt;

&lt;p&gt;
命令列輸入：
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;dirh&lt;/code&gt; : 目錄歷史&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prevd&lt;/code&gt; : 到前一目錄&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nextd&lt;/code&gt; : 到後一目錄&lt;/li&gt;
&lt;/ul&gt;</description><category>fish</category><category>linux</category><guid>https://mariolong.github.io/posts/fish-usage/</guid><pubDate>Thu, 06 Sep 2018 01:46:21 GMT</pubDate></item><item><title>Install ghcjs for ghc 8.4.3 on archlinux</title><link>https://mariolong.github.io/posts/install-ghcjs-archlinux/</link><dc:creator>Mario Long</dc:creator><description>&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ghc --version
The Glorious Glasgow Haskell Compilation System, version &lt;span class="m"&gt;8&lt;/span&gt;.4.3
&lt;/pre&gt;&lt;/div&gt;

&lt;div id="outline-container-org3a5df51" class="outline-2"&gt;
&lt;h2 id="org3a5df51"&gt;Install&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3a5df51"&gt;
&lt;p&gt;
參考 &lt;a href="https://github.com/ghcjs/ghcjs/tree/ghc-8.4"&gt;GitHub - ghcjs/ghcjs at ghc-8.4&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org36b84e1" class="outline-3"&gt;
&lt;h3 id="org36b84e1"&gt;getting and preparing the source tree&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org36b84e1"&gt;
&lt;p&gt;
add this step: &lt;code&gt;git checkout ghc-8.4&lt;/code&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/ghcjs/ghcjs.git
&lt;span class="nb"&gt;cd&lt;/span&gt; ghcjs
git checkout ghc-8.4
git submodule update --init --recursive
./utils/makePackages.sh
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org968f8e8" class="outline-3"&gt;
&lt;h3 id="org968f8e8"&gt;building the compiler&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org968f8e8"&gt;
&lt;p&gt;
You can use &lt;code&gt;cabal-install&lt;/code&gt; &lt;b&gt;and&lt;/b&gt; &lt;code&gt;stack&lt;/code&gt; to set up a build environment that contains these packages.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3fcd368" class="outline-4"&gt;
&lt;h4 id="org3fcd368"&gt;install cabal&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org3fcd368"&gt;
&lt;p&gt;
because GHCJS need cabal, so install it.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;stack install cabal-install
cabal update
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org71e8941" class="outline-4"&gt;
&lt;h4 id="org71e8941"&gt;Cabal new-build (x)&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org71e8941"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cabal new-configure
cabal new-build
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org1c8f25e" class="outline-4"&gt;
&lt;h4 id="org1c8f25e"&gt;link to executables (x) &lt;a id="org25d540a"&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org1c8f25e"&gt;
&lt;p&gt;
&lt;b&gt;DON'T DO THIS, IT IS NOT NECESSARY&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
Since cabal new-build does not install executables or wrapper scripts,
we need to make them accessible by hand. You can do this by creating
symlinks to the /utils/dist-newstyle-wrapper.sh script.
&lt;/p&gt;

&lt;p&gt;
For &lt;b&gt;example&lt;/b&gt; if the &lt;code&gt;.bin&lt;/code&gt; directory is in your &lt;code&gt;PATH&lt;/code&gt;:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; .bin
ln -s ../utils/dist-newstyle-wrapper.sh ghcjs
ln -s ../utils/dist-newstyle-wrapper.sh ghcjs-pkg
ln -s ../utils/dist-newstyle-wrapper.sh haddock-ghcjs
ln -s ../utils/dist-newstyle-wrapper.sh hsc2hs-ghcjs
ln -s ../utils/dist-newstyle-wrapper.sh ghcjs-boot
ln -s ../utils/dist-newstyle-wrapper.sh ghcjs-run
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgedf975d" class="outline-4"&gt;
&lt;h4 id="orgedf975d"&gt;stack&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgedf975d"&gt;
&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="orgb539980"&gt;&lt;/a&gt;DO THIS&lt;br&gt;
&lt;div class="outline-text-5" id="text-orgb539980"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;stack install
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="org7e20ea1"&gt;&lt;/a&gt;DON'T DO THIS (x)&lt;br&gt;
&lt;div class="outline-text-5" id="text-org7e20ea1"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;stack build
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id="outline-container-org00f2bdf" class="outline-4"&gt;
&lt;h4 id="org00f2bdf"&gt;install haddock (x)&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org00f2bdf"&gt;
&lt;p&gt;
when run ghcjs-boot, it will display following error message:
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;Haddock's resource directory does not exist!&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
I have no idea to solve this problem after execute following
statements. My decision is ignoring above error message and don't execute
section &lt;a href="https://mariolong.github.io/posts/install-ghcjs-archlinux/#org25d540a"&gt;"link to executables"&lt;/a&gt;. Re-install GHCJS again.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cabal install haddock

stack haddock
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org5676f56" class="outline-3"&gt;
&lt;h3 id="org5676f56"&gt;Booting GHCJS&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org5676f56"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ghcjs-boot
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
when invoked without arguments, ghcjs-boot will build the libraries
from &lt;code&gt;boot.tar&lt;/code&gt; (unless the current directory contains a &lt;code&gt;boot.yaml&lt;/code&gt;
file), installed in GHCJS' data directory (&lt;code&gt;boot.tar&lt;/code&gt; is generated by
the &lt;code&gt;makePackages.sh&lt;/code&gt; script and included in a source distribution).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf94bbd2" class="outline-3"&gt;
&lt;h3 id="orgf94bbd2"&gt;Test&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgf94bbd2"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'main = putStrLn "Hello World!"'&lt;/span&gt; &amp;gt; helloWorld.hs
$ stack &lt;span class="nb"&gt;exec&lt;/span&gt; -- ghcjs -o helloWorld helloWorld.hs
$ node helloWorld.jsexe/all.js
Hello world!
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
test is OK.
&lt;/p&gt;

&lt;p&gt;
I don't know why.
But these steps are work for me to install ghcjs with ghc-8.4.3
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc7cf9ee" class="outline-2"&gt;
&lt;h2 id="orgc7cf9ee"&gt;參考 &lt;a href="http://www.peachful.space/posts/ghcjs-on-arch-linux.html"&gt;Peachful Space - ghcjs on Arch Linux&lt;/a&gt; 和以下指令：(FAIL)&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc7cf9ee"&gt;
&lt;p&gt;
this is not work.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# install stack, haskell-stack, node.js and alex using pacman&lt;/span&gt;
$ sudo pacman -S stack haskell-stack nodejs alex

$ &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git clone https://github.com/ghcjs/ghcjs.git

&lt;span class="c1"&gt;# if you `stack setup` now you'll get an error saying /usr/lib/libtinfo.so.5 cannot be found&lt;/span&gt;

&lt;span class="c1"&gt;# install libtinfo from AUR&lt;/span&gt;
$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/build-aur
$ git clone https://aur.archlinux.org/libtinfo.git
$ &lt;span class="nb"&gt;cd&lt;/span&gt; libtinfo
$ makepkg -sri

&lt;span class="c1"&gt;# introducing the terrible hack...  I know, but it's the only way I can make it work&lt;/span&gt;
$ sudo ln -s /usr/lib/libtinfo.so /usr/lib/libtinfo.so.5

$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/ghcjs
$ stack setup
$ stack build
$ stack &lt;span class="nb"&gt;exec&lt;/span&gt; -- ghcjs-boot --dev

$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'main = putStrLn "Hello World!"'&lt;/span&gt; &amp;gt; helloWorld.hs
$ stack &lt;span class="nb"&gt;exec&lt;/span&gt; -- ghcjs -o helloWorld helloWorld.hs
$ node helloWorld.jsexe/all.js
Hello world!
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>ghcjs</category><category>haskell</category><category>linux</category><guid>https://mariolong.github.io/posts/install-ghcjs-archlinux/</guid><pubDate>Tue, 04 Sep 2018 00:22:35 GMT</pubDate></item><item><title>Turn on SMART to monitor HD</title><link>https://mariolong.github.io/posts/turn-on-smart/</link><dc:creator>Mario Long</dc:creator><description>&lt;p&gt;
ref: &lt;a href="https://wiki.archlinux.org/index.php/S.M.A.R.T."&gt;S.M.A.R.T. - ArchWiki&lt;/a&gt;
&lt;/p&gt;

&lt;div id="outline-container-org3802224" class="outline-2"&gt;
&lt;h2 id="org3802224"&gt;Install&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3802224"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yaourt -S smartmontools
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd9728a1" class="outline-2"&gt;
&lt;h2 id="orgd9728a1"&gt;start smartd&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd9728a1"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;systemctl start smartd
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
配置檔 &lt;code&gt;/etc/smartd.conf&lt;/code&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org789c2ba" class="outline-2"&gt;
&lt;h2 id="org789c2ba"&gt;smartd.conf&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org789c2ba"&gt;
&lt;p&gt;
To monitor for all possible SMART errors on all disks, the following
setting must be added in the configuration file.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DEVICESCAN -a
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org94c60c4" class="outline-3"&gt;
&lt;h3 id="org94c60c4"&gt;auto mail&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org94c60c4"&gt;
&lt;p&gt;
先依 &lt;a href="https://dominicm.com/configure-email-notifications-on-arch-linux/"&gt;Configure Email Notifications on Arch Linux | DominicM&lt;/a&gt; 設定 s-nail,
再於 &lt;code&gt;/etc/smartd.conf&lt;/code&gt; 加上以下指令
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DEVICESCAN -m address@domain.com -M test
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org8dadc8d" class="outline-2"&gt;
&lt;h2 id="org8dadc8d"&gt;test and view the result&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org8dadc8d"&gt;
&lt;p&gt;
來源： &lt;a href="https://www.techrepublic.com/article/how-to-check-ssd-health-in-linux/"&gt;How to check SSD health in Linux - TechRepublic&lt;/a&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo smartctl -i /dev/sda
sudo smartctl -t long -a /dev/sda
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo smartctl -a /dev/sda
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The short test will examine the following:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Electrical Properties: The controller tests its own electronics,
which is different for each manufacturer.&lt;/li&gt;
&lt;li&gt;Mechanical Properties: Servos and positioning mechanisms are tested
(also specific to each manufacturer).&lt;/li&gt;
&lt;li&gt;Read/Verify : A certain area of the disk will be read to verify
certain data (the size and position of the region read is unique to
each manufacturer).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
The long test runs everything included with the short test, while adding:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;No time restriction and in the Read/Verify segment.&lt;/li&gt;
&lt;li&gt;The entire disk is checked (as opposed to just a section).&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo smartctl -A /dev/sda
&lt;/pre&gt;&lt;/div&gt;

&lt;dl class="org-dl"&gt;
&lt;dt&gt;Power_On_Hours&lt;/dt&gt;&lt;dd&gt;how many hours the drive has been powered on. Each
make/model of drive has a recommended "shelf life"
of hours it can be used. Most modern SSDs have
fairly incredible lifespans, so chances are you're
not going to bump into the end of life. If you're
using an older drive, this can be an issue.&lt;/dd&gt;

&lt;dt&gt;Wear_Leveling_Count&lt;/dt&gt;&lt;dd&gt;Stands for the remaining endurance of the
drive in percentage (starting from 100 and decreasing linearly as
the drive is written to).&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>linux</category><category>smart</category><guid>https://mariolong.github.io/posts/turn-on-smart/</guid><pubDate>Wed, 11 Jul 2018 13:40:06 GMT</pubDate></item><item><title>部落格，重回 nikola+org-mode</title><link>https://mariolong.github.io/posts/zhong-hui-nikola-xie-luo-ge/</link><dc:creator>Mario Long</dc:creator><description>&lt;div&gt;&lt;div id="table-of-contents"&gt;
&lt;h2&gt;目錄&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mariolong.github.io/posts/zhong-hui-nikola-xie-luo-ge/#org2c0650f"&gt;1. 安裝&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mariolong.github.io/posts/zhong-hui-nikola-xie-luo-ge/#org7528742"&gt;2. 設定&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mariolong.github.io/posts/zhong-hui-nikola-xie-luo-ge/#org4179aca"&gt;2.1. configuration file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mariolong.github.io/posts/zhong-hui-nikola-xie-luo-ge/#orge6c0ff7"&gt;2.2. theme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mariolong.github.io/posts/zhong-hui-nikola-xie-luo-ge/#orgfe473b2"&gt;2.3. 用 &lt;code&gt;nikola github_deploy&lt;/code&gt; 快速發佈文章&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mariolong.github.io/posts/zhong-hui-nikola-xie-luo-ge/#org40e5cb2"&gt;2.3.1. 在 nikola github_deploy 之前&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mariolong.github.io/posts/zhong-hui-nikola-xie-luo-ge/#org8ec938c"&gt;3. 用 org-mode 寫文章&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mariolong.github.io/posts/zhong-hui-nikola-xie-luo-ge/#org3003e56"&gt;3.1. 修改 /orgmode/init.el&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mariolong.github.io/posts/zhong-hui-nikola-xie-luo-ge/#orgcc916f3"&gt;3.1.1. 刪除不必要的空白&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mariolong.github.io/posts/zhong-hui-nikola-xie-luo-ge/#org9559e5a"&gt;3.1.2. Convert inline verbatim to kbd when HTML export&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mariolong.github.io/posts/zhong-hui-nikola-xie-luo-ge/#orgb74da2f"&gt;3.1.3. 在 Inline verbatim and code 不要空白&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mariolong.github.io/posts/zhong-hui-nikola-xie-luo-ge/#org9b76652"&gt;3.1.4. 用 pygment 幫程式碼著色&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mariolong.github.io/posts/zhong-hui-nikola-xie-luo-ge/#org26ce549"&gt;3.2. 揷入圖片&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mariolong.github.io/posts/zhong-hui-nikola-xie-luo-ge/#orgae8b859"&gt;3.2.1. 利用 Google Drive 取得 Google Photos 的照片&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mariolong.github.io/posts/zhong-hui-nikola-xie-luo-ge/#orgf98624c"&gt;3.3. 圖片連結 (Image URLs)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mariolong.github.io/posts/zhong-hui-nikola-xie-luo-ge/#orgad1b017"&gt;3.4. plain list&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mariolong.github.io/posts/zhong-hui-nikola-xie-luo-ge/#org7736539"&gt;3.4.1. Lord of the Rings&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mariolong.github.io/posts/zhong-hui-nikola-xie-luo-ge/#org11433e6"&gt;3.5. Subscripts and superscripts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mariolong.github.io/posts/zhong-hui-nikola-xie-luo-ge/#orgf0aa967"&gt;3.6. Teasers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mariolong.github.io/posts/zhong-hui-nikola-xie-luo-ge/#org91dc26d"&gt;3.7. text block&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mariolong.github.io/posts/zhong-hui-nikola-xie-luo-ge/#orgb9aa2e8"&gt;4. 開始使用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
掙扎了許久，還是先用 &lt;a href="https://getnikola.com/"&gt;nikola&lt;/a&gt; 記錄一些事，畢竟比較熟悉，能快一點上手。
&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mariolong.github.io/posts/zhong-hui-nikola-xie-luo-ge/"&gt;閱讀更多…&lt;/a&gt; (尚餘 5 分鐘)&lt;/p&gt;&lt;/div&gt;</description><category>linux</category><category>nikola</category><guid>https://mariolong.github.io/posts/zhong-hui-nikola-xie-luo-ge/</guid><pubDate>Mon, 14 May 2018 01:32:19 GMT</pubDate></item><item><title>alsa equaler</title><link>https://mariolong.github.io/posts/alsa-equaler/</link><dc:creator>Mario Long</dc:creator><description>&lt;p&gt;
音響要好聲，空間才是王道&lt;sup&gt;&lt;a id="fnr.1" class="footref" href="https://mariolong.github.io/posts/alsa-equaler/#fn.1"&gt;1&lt;/a&gt;&lt;/sup&gt;，没有 DRC 前，先試試等化器&lt;sup&gt;&lt;a id="fnr.2" class="footref" href="https://mariolong.github.io/posts/alsa-equaler/#fn.2"&gt;2&lt;/a&gt;&lt;/sup&gt;，也許調一調就可用啦。在 archlinuxl 中，我用的是 alsa 的架構播放音樂，
Archlinux WIKI 的 &lt;a href="https://wiki.archlinux.org/index.php/Advanced_Linux_Sound_Architecture"&gt;Advanced linux Sound Architecture&lt;/a&gt; 已說明等化器的安裝及設定，照做即可。
&lt;/p&gt;

&lt;div id="outline-container-org105eac7" class="outline-2"&gt;
&lt;h2 id="org105eac7"&gt;install&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org105eac7"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yaourt -S alsaequal
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org023a755" class="outline-2"&gt;
&lt;h2 id="org023a755"&gt;config&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org023a755"&gt;
&lt;p&gt;
在 &lt;kbd&gt;/etc/asound.conf&lt;/kbd&gt; 加上以下設定：
&lt;/p&gt;

&lt;pre class="example"&gt;
ctl.equal {
    type equal;
}

pcm.plugequal {
    type equal;
    # Modify the line below if you do not
    # want to use sound card 0.
    #slave.pcm "plughw:0,0";
    # by default we want to play from more sources at time:
    slave.pcm "plug:dmix";
}

# pcm.equal {
# If you do not want the equalizer to be your
# default soundcard comment the following
# line and uncomment the above line. (You can
# choose it as the output device by addressing
# it with specific apps,eg mpg123 -a equal 06.Back_In_Black.mp3)
pcm.!default {
    type plug;
    slave.pcm plugequal;
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org897a074" class="outline-2"&gt;
&lt;h2 id="org897a074"&gt;reboot&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org897a074"&gt;
&lt;p&gt;
讓 alsa 可用等化器
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6fbc964" class="outline-2"&gt;
&lt;h2 id="org6fbc964"&gt;調整等化器&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org6fbc964"&gt;
&lt;p&gt;
執行
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;alsamixer -D equal
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
PS. 用 Q,W,E,Z,X,C 可分別調整左右聲道的音量。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org385b322" class="outline-2"&gt;
&lt;h2 id="org385b322"&gt;mpd issue&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org385b322"&gt;
&lt;p&gt;
總是會連不上 mpd server，後來在 WIKI 中讀到一段話：
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
Note that configuration file is different for each user (until not
specified else) it is saved in ~/.alsaequal.bin. so if you want to use
ALSAEqual with mpd or another software running under different user,
you can configure it using
&lt;/p&gt;

&lt;p&gt;
$ su mpd -c 'alsamixer -D equal'
&lt;/p&gt;

&lt;p&gt;
or for example, you can make a symlink to your .alsaequal.bin in his
home…
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
我在 &lt;kbd&gt;/root&lt;/kbd&gt; 目錄下，建一個連到主目錄 &lt;kbd&gt;.alsaequal.bin&lt;/kbd&gt; 的連結，
mpd 即可使用，瞎打誤撞。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="footnotes"&gt;
&lt;h2 class="footnotes"&gt;Footnotes: &lt;/h2&gt;
&lt;div id="text-footnotes"&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.1" class="footnum" href="https://mariolong.github.io/posts/alsa-equaler/#fnr.1"&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;div class="footpara"&gt;&lt;p class="footpara"&gt;
&lt;a href="http://www.miaofoundry.url.tw/products-and-services/DRC/"&gt;音樂再生首要難題 – 空間&lt;/a&gt;
&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.2" class="footnum" href="https://mariolong.github.io/posts/alsa-equaler/#fnr.2"&gt;2&lt;/a&gt;&lt;/sup&gt; &lt;div class="footpara"&gt;&lt;p class="footpara"&gt;
&lt;a href="http://www.miaofoundry.url.tw/products-and-services/DRC/whats/DRC-vs-others/"&gt;等化器(EQ)&lt;/a&gt;
&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;</description><category>alsa</category><category>linux</category><category>mpd</category><category>music</category><guid>https://mariolong.github.io/posts/alsa-equaler/</guid><pubDate>Sun, 14 Jan 2018 22:20:29 GMT</pubDate></item><item><title>post install for htpc</title><link>https://mariolong.github.io/posts/post-install-for-htpc/</link><dc:creator>Mario Long</dc:creator><description>&lt;p&gt;
htpc
&lt;/p&gt;

&lt;div id="outline-container-orgaa72a0b" class="outline-2"&gt;
&lt;h2 id="orgaa72a0b"&gt;kodi&lt;/h2&gt;
&lt;/div&gt;


&lt;div id="outline-container-org44812e3" class="outline-2"&gt;
&lt;h2 id="org44812e3"&gt;wifi&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org44812e3"&gt;
&lt;p&gt;
wifi-menu
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yaourt -S wpa_supplicant dialog
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
setup wifi using wifi-menu
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ip link
&amp;lt;interface&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wifi-menu &amp;lt;interface&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;netctl start &amp;lt;wifi-service&amp;gt;
netctl &lt;span class="nb"&gt;enable&lt;/span&gt; &amp;lt;wifi-service&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc63a484" class="outline-2"&gt;
&lt;h2 id="orgc63a484"&gt;auto mount removable device by udiskie&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc63a484"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yaourt -S udiskie
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org49ff25e" class="outline-2"&gt;
&lt;h2 id="org49ff25e"&gt;issues&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org49ff25e"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org5f11ae4" class="outline-3"&gt;
&lt;h3 id="org5f11ae4"&gt;alsa&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org5f11ae4"&gt;
&lt;pre class="example"&gt;
snd_.._intel index = 1
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf84484c" class="outline-3"&gt;
&lt;h3 id="orgf84484c"&gt;default.config&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgf84484c"&gt;
&lt;pre class="example"&gt;
need_root_right = no
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>linux</category><guid>https://mariolong.github.io/posts/post-install-for-htpc/</guid><pubDate>Fri, 29 Dec 2017 09:14:13 GMT</pubDate></item><item><title>Post-installation of Archlinux</title><link>https://mariolong.github.io/posts/post-installation-of-archlinux/</link><dc:creator>Mario Long</dc:creator><description>&lt;p&gt;
首先依 &lt;a href="https://mariolong.github.io/posts/install-arch-linux-2017"&gt;Install Arch linux (2017)&lt;/a&gt; 將基本系統裝好，接著參考 &lt;a href="https://wiki.archlinux.org/index.php/General_recommendations"&gt;General
recommendations - ArchWiki&lt;/a&gt; 記錄下對我而言必要的軟體及簡單設定，讓日常進入可工作狀態。
&lt;/p&gt;

&lt;div id="outline-container-orgd77cbc6" class="outline-2"&gt;
&lt;h2 id="orgd77cbc6"&gt;haskell&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd77cbc6"&gt;
&lt;p&gt;
安裝的方法參看 &lt;a href="https://mariolong.github.io/posts/install-haskell-applications"&gt;Install Haskell Applications&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org8ea7240" class="outline-2"&gt;
&lt;h2 id="org8ea7240"&gt;桌面及外觀&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org8ea7240"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org21b3936" class="outline-3"&gt;
&lt;h3 id="org21b3936"&gt;theme&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org21b3936"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yaourt -S breeze&lt;span class="o"&gt;{&lt;/span&gt;,-kde4,-gtk&lt;span class="o"&gt;}&lt;/span&gt; flat-remix-git lxappearance
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Using Breeze theme and Flat Remix icon theme
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7cfc021" class="outline-3"&gt;
&lt;h3 id="org7cfc021"&gt;lxappearance&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org7cfc021"&gt;
&lt;p&gt;
用 lxappearance 修改 gtk 程式的外觀。
&lt;/p&gt;

&lt;p&gt;
尤其是 google chrome 書籤列的字體，可能太小。這時即可用 lxappearance 調整字型和大小。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org31f0ef7" class="outline-3"&gt;
&lt;h3 id="org31f0ef7"&gt;oblogout and screen lock&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org31f0ef7"&gt;
&lt;p&gt;
&lt;a href="https://wiki.archlinux.org/index.php/Oblogout"&gt;https://wiki.archlinux.org/index.php/Oblogout&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
oblogout is an optional, configurable logout script that presents a
graphical interface (i.e. buttons) to cancel, logout, restart,
shutdown, suspend, hibernate, and lock the screen.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yaourt -S oblogout
sudo nano /etc/oblogout.conf
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
修改 [looks] 中的 buttons，以顯示按鈕。
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[looks]
buttons = cancel, restart, shutdown, lock
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
修改 [shortcuts] 中不用的命令刪掉。
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[shortcuts]
cancel = Escape
shutdown = S
restart = R
#suspend = U
#logout = L
lock = K
#hibernate = H
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
修改 [commands] 中的命令。
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[commands]
lock = slock
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org8568e45" class="outline-2"&gt;
&lt;h2 id="org8568e45"&gt;system&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org8568e45"&gt;
&lt;p&gt;
DPMS: display power manpage system
slock: screen saver
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge658707" class="outline-2"&gt;
&lt;h2 id="orge658707"&gt;網路&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge658707"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org2498181" class="outline-3"&gt;
&lt;h3 id="org2498181"&gt;dropbox&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org2498181"&gt;
&lt;p&gt;
dropbox 在 archlinux.fr 中
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yaourt -S dropbox perl-file-mimeinfo
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org5f9795c" class="outline-3"&gt;
&lt;h3 id="org5f9795c"&gt;qbittorrent&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org5f9795c"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yaourt -S qbittorrent
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org89330a9" class="outline-2"&gt;
&lt;h2 id="org89330a9"&gt;檔案管理&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org89330a9"&gt;
&lt;p&gt;
using mc and pcmanfm-qt
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yaourt -S mc pcmanfm-qt gvfs-mtp
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6d34ebf" class="outline-3"&gt;
&lt;h3 id="org6d34ebf"&gt;pcmanfm-qt&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org6d34ebf"&gt;
&lt;p&gt;
使用 pcmanfm-qt, for mtp 傳送檔案 and dropbox
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7902cc3" class="outline-4"&gt;
&lt;h4 id="org7902cc3"&gt;issues&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org7902cc3"&gt;
&lt;p&gt;
error message:
&lt;/p&gt;

&lt;pre class="example"&gt;
/usr/bin/xdg-open: line 922: pcmanfm: command not found
&lt;/pre&gt;

&lt;p&gt;
fix this problem:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo ln -s /usr/bin/pcmanfm-qt /usr/bin/pcmanfm
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3420cb5" class="outline-3"&gt;
&lt;h3 id="org3420cb5"&gt;mc&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org3420cb5"&gt;
&lt;p&gt;
midnight-commander like norton commander
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org764d90b" class="outline-2"&gt;
&lt;h2 id="org764d90b"&gt;影音&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org764d90b"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yaourt -S alsa-utils mpd mpc ncmpcpp mpv ffmpeg sox kodi kid3 aegisub
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org8729357" class="outline-3"&gt;
&lt;h3 id="org8729357"&gt;alsa&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org8729357"&gt;
&lt;p&gt;
聲音
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org51a0912" class="outline-3"&gt;
&lt;h3 id="org51a0912"&gt;mpd, mpc, ncmpcpp&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org51a0912"&gt;
&lt;p&gt;
音樂背景播放
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgce67dbe" class="outline-3"&gt;
&lt;h3 id="orgce67dbe"&gt;mpv&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgce67dbe"&gt;
&lt;p&gt;
影片播放
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mpv cdda://
mpv dvd://
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org505482e" class="outline-3"&gt;
&lt;h3 id="org505482e"&gt;kodi&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org505482e"&gt;
&lt;p&gt;
影片管理
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3e0c544" class="outline-3"&gt;
&lt;h3 id="org3e0c544"&gt;aegisub&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org3e0c544"&gt;
&lt;p&gt;
字幕處理
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb73648f" class="outline-3"&gt;
&lt;h3 id="orgb73648f"&gt;ffmpeg&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgb73648f"&gt;
&lt;p&gt;
影片處理
2-pass to control file size
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6e18782" class="outline-3"&gt;
&lt;h3 id="org6e18782"&gt;dvdbackup&lt;/h3&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgc9ecabf" class="outline-3"&gt;
&lt;h3 id="orgc9ecabf"&gt;sox&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgc9ecabf"&gt;
&lt;p&gt;
wav 轉 aiff
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6d9515b" class="outline-3"&gt;
&lt;h3 id="org6d9515b"&gt;kid3&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org6d9515b"&gt;
&lt;p&gt;
音檔加 tag
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org9b577de" class="outline-2"&gt;
&lt;h2 id="org9b577de"&gt;其它工具&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9b577de"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org59f5693" class="outline-3"&gt;
&lt;h3 id="org59f5693"&gt;emacs&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org59f5693"&gt;
&lt;p&gt;
ripgrep
opencc: using s2twp.json
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0093cfb" class="outline-3"&gt;
&lt;h3 id="org0093cfb"&gt;meld&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org0093cfb"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yaourt -S meld
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org8c99d54" class="outline-3"&gt;
&lt;h3 id="org8c99d54"&gt;albert&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org8c99d54"&gt;
&lt;p&gt;
應用程式快速啓動器
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yaourt -S albert qt5-graphicaleffects qt5-quickcontrols
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb13410b" class="outline-3"&gt;
&lt;h3 id="orgb13410b"&gt;speedcrunch (calculator)&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgb13410b"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yaourt -S speedcrunch
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org212c1f2" class="outline-3"&gt;
&lt;h3 id="org212c1f2"&gt;calibre&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org212c1f2"&gt;
&lt;p&gt;
管理電子書，我只用來管理我的 kindle
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yaourt -S calibre
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org73c6a65" class="outline-3"&gt;
&lt;h3 id="org73c6a65"&gt;nikola&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org73c6a65"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install nikola Pygments
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org1a2ed20" class="outline-3"&gt;
&lt;h3 id="org1a2ed20"&gt;htop&lt;/h3&gt;
&lt;/div&gt;
&lt;div id="outline-container-org9c33b88" class="outline-3"&gt;
&lt;h3 id="org9c33b88"&gt;gnash&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org9c33b88"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yaourt -S gnash-git
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
可讀 .swf 檔
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3cac0c6" class="outline-2"&gt;
&lt;h2 id="org3cac0c6"&gt;programming&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3cac0c6"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org97b1233" class="outline-3"&gt;
&lt;h3 id="org97b1233"&gt;python and depending modules&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org97b1233"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yaourt -S python python-pip
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc51800d" class="outline-3"&gt;
&lt;h3 id="orgc51800d"&gt;systemd timers&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>haskell</category><category>linux</category><category>taffybar</category><category>xmonad</category><guid>https://mariolong.github.io/posts/post-installation-of-archlinux/</guid><pubDate>Mon, 27 Nov 2017 07:28:36 GMT</pubDate></item></channel></rss>