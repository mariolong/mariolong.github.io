#+BEGIN_COMMENT
.. title: 部落格，重回 nikola+org-mode
.. slug: zhong-hui-nikola-xie-luo-ge
.. date: 2018-05-14 09:32:19 UTC+08:00
.. tags: Linux, nikola
.. category: computer
.. link:
.. description: writing blogger using by nikola again.
.. type: text
#+END_COMMENT
#+OPTIONS: toc:nil ^:{}

掙扎了許久，還是先用 [[https://getnikola.com/][nikola]] 記錄一些事，畢竟比較熟悉，能快一點上手。

* 安裝
#+BEGIN_SRC sh
pip nikola
#+END_SRC

* 設定

執行 ~nikola init~ 後，依指示設定，比較省事。

#+BEGIN_SRC sh
nikola init <blog-name>
cd <blog-name>
#+END_SRC

** configuration file
修改 ~conf.py~ ，慢慢改，內容很多，不必急於一時。

** theme
#+BEGIN_SRC sh
nikola theme install bootstrap
#+END_SRC

*** TODO add local search
https://plugins.getnikola.com/v7/localsearch/

** org-mod
先安裝 plugin orgmode，再做一點點微調即可。

#+BEGIN_SRC sh
nikola plugin -i orgmode
#+END_SRC

開啟 ~<blog-name>/plugins/orgmode/init.el~ ，加上以下的程式碼。

*** 刪除不必要的空白

換行時，在兩個字間會有一個空白，不好看。

#+BEGIN_SRC emacs-lisp
  ;; https://github.com/emacs-china/emacs-china.github.io/blob/master/blog/FengShu/org-remove-useless-space-between-chinese.org
  (defun eh-org-clean-space (text backend info)
    "在 export 为 HTML 时，删除中文之间不必要的空格"
    (when (org-export-derived-backend-p backend 'html)
      (let ((regexp "[[:multibyte:]]")
            (string text))
        ;; org 默认将一个换行符转换为空格，但中文不需要这个空格，删除。
        (setq string
              (replace-regexp-in-string
               (format "\\(%s\\) *\n *\\(%s\\)" regexp regexp)
               "\\1\\2" string))
        ;; 删除粗体之前的空格
        (setq string
              (replace-regexp-in-string
               (format "\\(%s\\) +\\(<\\)" regexp)
               "\\1\\2" string))
        ;; 删除粗体之后的空格
        (setq string
              (replace-regexp-in-string
               (format "\\(>\\) +\\(%s\\)" regexp)
               "\\1\\2" string))
        string)))

  (add-to-list 'org-export-filter-paragraph-functions
               'eh-org-clean-space)
#+END_SRC

*** Convert inline verbatim to kbd when HTML export

ref: https://emacs-china.org/t/org-mode/1165

change =verbatim= to =kbd=

~code~

#+BEGIN_SRC emacs-lisp
  (setq org-html-text-markup-alist
        '((bold . "<b>%s</b>")
          (code . "<code>%s</code>")
          (italic . "<i>%s</i>")
          (strike-through . "<del>%s</del>")
          (underline . "<span class=\"underline\">%s</span>")
          (verbatim . "<kbd>%s</kbd>")))
#+END_SRC

** nikola github_deploy

REF: https://getnikola.com/handbook.html#deploying-to-github

- Initialize a Nikola site, if you haven’t already.

- Initialize a git repository in your Nikola source directory by running:

#+BEGIN_SRC sh
git init .
git remote add origin git@github.com:user/repository.git
#+END_SRC

Setup branches and remotes in ~conf.py~:

- GITHUB_DEPLOY_BRANCH is the branch where Nikola-generated HTML files will be deployed. It should be gh-pages for project pages and master for user pages (user.github.io).
- GITHUB_SOURCE_BRANCH is the branch where your Nikola site source will be deployed. We recommend and default to src.
- GITHUB_REMOTE_NAME is the remote to which changes are pushed.
- GITHUB_COMMIT_SOURCE controls whether or not the source branch is automatically committed to and pushed. We recommend setting it to True, unless you are automating builds with Travis CI.

Create a ~.gitignore~ file. We recommend adding at least the following entries:

#+BEGIN_SRC sh
cache
.doit.db
__pycache__
output
#+END_SRC

If you set GITHUB_COMMIT_SOURCE to False, you must switch to your source branch and commit to it. Otherwise, this is done for you.

Run ~nikola github_deploy~. This will *build* the site, *commit* the
output folder to your deploy branch, and *push* to GitHub. Your website
should be up and running within a few minutes.

*** install ghp_import2

#+BEGIN_SRC sh
sudo pip install ghp_import2
#+END_SRC

*** ssh
**** install openssh

#+BEGIN_SRC sh
yaourt -S openssh
#+END_SRC

**** follow github help page to add ssh connect to github
- [[https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/][Generating a new SSH key and adding it to the ssh-agent - User Documentation]]
- [[https://help.github.com/articles/working-with-ssh-key-passphrases/][Working with SSH key passphrases - User Documentation]]
- [[https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/][Adding a new SSH key to your GitHub account - User Documentation]]

#+BEGIN_SRC sh
ssh-keygen -p
#+END_SRC

**** fix ~.git/config~

https://stackoverflow.com/questions/13509293/git-fatal-could-not-read-from-remote-repository

#+BEGIN_QUOTE
I was facing same issue a while ago...
my .git/config had

url = git@github.com:manishnakar/polymer-demo.git

I replaced it with

url = https://github.com/manishnakar/polymer-demo.git

and it works now:)
#+END_QUOTE

**** TODO i don't want to input password twice

* 開始使用

建立新的文章，

#+BEGIN_SRC sh
nikola new-post -e -f orgmod
#+END_SRC

寫完就 build

#+BEGIN_SRC sh
nikola build
#+END_SRC

或發佈吧！

#+BEGIN_SRC sh
nikola github_deploy
#+END_SRC

一切都就緒了，那就開始專心寫文章吧！
